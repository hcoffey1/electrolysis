#Hayden Coffey

#Tool to help(?) setup some of the config files
#needed for the transpiler.
#Takes a module as an argument

import sys
import os
import fileinput

makeFileStr = """#**************
# genDep.py created makefile 
# 
#**************

targets=generated.olean 

all: $(targets)

.PHONY: clean

#Lean2 breaks when running multiple instances
MAKEFLAGS=--jobs=1

generated.olean: generated.lean
$(targets):
\t$(LEAN2_BIN) -o $@ $<

clean:
\trm - f * .olean"""


def getTokens(line, d):
	removeChars = ['(', ')', '@', '[', ']']
	tokens = []
	splt = line.split()
	for i in range(len(splt)):
		if d in splt[i] and '"' not in splt[i]:
			#Remove extra characters
			tmp = list(filter(lambda x: x not in removeChars, splt[i]))
			t = ''
			for j in tmp:
				t += j

			if not t.startswith(d):
				break

			if '«' in t and '»' not in t:
				j = 0
				while '»' not in splt[i+j]:
					t = t + ' ' + splt[i+j]
					j += 1
				t = t + ' ' + splt[i+j]

			tokens.append(t)

	return list(set(tokens))


def createNewModule(module):
	dirPath = './thys/' + module + '/'
	os.mkdir(dirPath)
	with open(dirPath + 'config.toml', 'w') as f:
		configStr = "#File autogenerated by genDep.py\n"
		configStr += "rustc_args = \"$RUST_SRC_PATH/lib" + module + "/lib.rs\""
		configStr += "\ntargets = [\n]\n"
		f.write(configStr)

	with open(dirPath + 'makefile', 'w') as f:
		f.write(makeFileStr)


def insertConfigLine(configPath, d):
	for line in fileinput.FileInput(configPath, inplace=1):
		if "targets = [" in line:
			line = line.replace(line, line + '  \"' + d + '\",\n')
		print(line, end='')


def updateModule(module, deps):
	print(module, '...', end='')
	if os.path.exists('./thys/' + module):
		print(' exists', end='')
	else:
		print(' does not exist. Creating...', end='')
		createNewModule(module)
	print('')

	configPath = './thys/' + module + '/config.toml'
	with open(configPath) as f:
		configLines = f.readlines()

	for d in deps:
		found = False
		print('\t', d, end='')
		for l in configLines:
			if d in l:
				print(' exists', end='')
				found = True
				break

		#Insert line into config file
		if not found:
			print(' missing. Inserting...', end='')
			insertConfigLine(configPath, d)
		print('')


def main():
	module = sys.argv[1]
	if not os.path.exists('./thys/' + module):
		print("Module not yet created, generating now...")
		createNewModule(module)
		print("Module has been generated.")
		return 

	with open('./thys/' + module + '/generated.lean') as f:
		genLean = f.readlines()

	#Get imported module dependencies
	deps = list(set(list(map(lambda y: (y.split()[1]).split('.')[0], filter(
		lambda x: "import" in x, genLean)))))

	if module in deps:
		deps.remove(module)

	#Filter imports out of file lines
	genLean = list(
		filter(lambda x: "import" not in x and "open" not in x, genLean))

	tokens = {}
	for d in deps:
		tokens[d] = []
		for l in genLean:
			if d in l:
				tokens[d] += getTokens(l, d)
		tokens[d] = list(set(tokens[d]))

	for k in tokens.keys():
		updateModule(k, tokens[k])


if __name__ == "__main__":
	main()
